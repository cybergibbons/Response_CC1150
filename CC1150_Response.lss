
CC1150_Response.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080022a  0080022a  00000524  2**0
                  ALLOC
  3 .debug_aranges 00000070  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000013d  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067b  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021f  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f4  00000000  00000000  00000f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	
	// disable interrupts
	cli();
}

void start_tx() {
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__vector_9>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e6 e6       	ldi	r30, 0x66	; 102
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	aa 32       	cpi	r26, 0x2A	; 42
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	aa e2       	ldi	r26, 0x2A	; 42
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a0 33       	cpi	r26, 0x30	; 48
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	5b d1       	rcall	.+694    	; 0x3d2 <main>
 11c:	a2 c1       	rjmp	.+836    	; 0x462 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <setup_spi>:


void setup_spi(uint8_t clock) {
	
	// configure the DDR for the pins.
	DDRB |= (1<<SPI_MOSI_PIN); // output
 120:	22 9a       	sbi	0x04, 2	; 4
   	DDRB &= ~(1<<SPI_MISO_PIN); // input
 122:	23 98       	cbi	0x04, 3	; 4
    DDRB |= (1<<SPI_SCK_PIN);// output
 124:	21 9a       	sbi	0x04, 1	; 4
    DDRB |= (1<<SPI_SS_PIN);//output
 126:	20 9a       	sbi	0x04, 0	; 4
	
	// configure SPI control register
	SPCR = (0 << SPIE) // no interrupt please
 128:	98 2f       	mov	r25, r24
 12a:	91 70       	andi	r25, 0x01	; 1
 12c:	90 65       	ori	r25, 0x50	; 80
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	22 70       	andi	r18, 0x02	; 2
 134:	30 70       	andi	r19, 0x00	; 0
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	92 2b       	or	r25, r18
 13c:	9c bd       	out	0x2c, r25	; 44
		| (0 << CPOL) // default
		| (0 << CPHA) // default
		| ((clock & 0x02) << SPR1) // top clock bit
		| ((clock & 0x01) << SPR0); // bottom clock bit;
		
	SPSR = (clock & 0x04) << SPI2X;
 13e:	84 70       	andi	r24, 0x04	; 4
 140:	8d bd       	out	0x2d, r24	; 45
}
 142:	08 95       	ret

00000144 <enable_pcint>:

void enable_pcint(void) {
	// This is the data out
	DDRL |= (1<<GDO0); // output
 144:	ea e0       	ldi	r30, 0x0A	; 10
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
	
	// SPI_MISO_PIN receives a synchronous clock
	// PB3 is the pin used 
	PCICR |= (1 << PCIE0); // Enable PCINT[7:0]
 14e:	e8 e6       	ldi	r30, 0x68	; 104
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3); // enable mask for PCINT3
 158:	eb e6       	ldi	r30, 0x6B	; 107
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
	
	// enable interrupts
	sei();
 162:	78 94       	sei
}
 164:	08 95       	ret

00000166 <disable_pcint>:

void disable_pcint(void) {
	DDRL &= ~(1<<GDO0); // input
 166:	ea e0       	ldi	r30, 0x0A	; 10
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	80 81       	ld	r24, Z
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	80 83       	st	Z, r24
	
	PCICR &= ~(1 << PCIE0);
 170:	e8 e6       	ldi	r30, 0x68	; 104
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	80 83       	st	Z, r24
	PCMSK0 &= ~(1 << PCINT3);
 17a:	eb e6       	ldi	r30, 0x6B	; 107
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	80 83       	st	Z, r24
	
	// disable interrupts
	cli();
 184:	f8 94       	cli
}
 186:	08 95       	ret

00000188 <__vector_9>:
}

// Interrupt handler for pin change interrupt.
// This clocks the buffer out on the L0 pin
// in responses to changes B3
ISR(PCINT0_vect) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	0b b6       	in	r0, 0x3b	; 59
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
		
	// CC1150 samples on falling edge
	// So we need to setup on rising edge
	// MISO has the clock signal
	if (tx_active && (PINB & (1 << SPI_MISO_PIN))) {
 19e:	80 91 2d 02 	lds	r24, 0x022D
 1a2:	88 23       	and	r24, r24
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <__vector_9+0x20>
 1a6:	5f c0       	rjmp	.+190    	; 0x266 <__vector_9+0xde>
 1a8:	1b 9b       	sbis	0x03, 3	; 3
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <__vector_9+0xde>
		
		if (tx_header) {
 1ac:	80 91 2c 02 	lds	r24, 0x022C
 1b0:	90 91 2a 02 	lds	r25, 0x022A
 1b4:	88 23       	and	r24, r24
 1b6:	b9 f0       	breq	.+46     	; 0x1e6 <__vector_9+0x5e>
			if (tx_sample < 3) {
 1b8:	93 30       	cpi	r25, 0x03	; 3
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <__vector_9+0x3c>
				PORTL |= (1 << GDO0);
 1bc:	80 91 0b 01 	lds	r24, 0x010B
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <__vector_9+0x42>
			} else {
				PORTL &= ~(1 << GDO0);
 1c4:	80 91 0b 01 	lds	r24, 0x010B
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	80 93 0b 01 	sts	0x010B, r24
			}
			
			tx_sample++;
 1ce:	89 2f       	mov	r24, r25
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 2a 02 	sts	0x022A, r24
			
			if (tx_sample >= 6) {
 1d6:	86 30       	cpi	r24, 0x06	; 6
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <__vector_9+0x54>
 1da:	45 c0       	rjmp	.+138    	; 0x266 <__vector_9+0xde>
				tx_header = 0;
 1dc:	10 92 2c 02 	sts	0x022C, r1
				tx_sample = 0;
 1e0:	10 92 2a 02 	sts	0x022A, r1
 1e4:	40 c0       	rjmp	.+128    	; 0x266 <__vector_9+0xde>
			}
		} else {
				
			switch (tx_sample++) {
 1e6:	9f 5f       	subi	r25, 0xFF	; 255
 1e8:	90 93 2a 02 	sts	0x022A, r25
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	91 30       	cpi	r25, 0x01	; 1
 1f0:	29 f0       	breq	.+10     	; 0x1fc <__vector_9+0x74>
 1f2:	91 30       	cpi	r25, 0x01	; 1
 1f4:	68 f0       	brcs	.+26     	; 0x210 <__vector_9+0x88>
 1f6:	92 30       	cpi	r25, 0x02	; 2
 1f8:	b1 f5       	brne	.+108    	; 0x266 <__vector_9+0xde>
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <__vector_9+0x9c>
				case 0:
					PORTL |= (1 << GDO0);
					break;
				case 1:
					if (tx_buf[tx_byte] & tx_bit) {
 1fc:	e0 91 2b 02 	lds	r30, 0x022B
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ec 5d       	subi	r30, 0xDC	; 220
 204:	fd 4f       	sbci	r31, 0xFD	; 253
 206:	80 81       	ld	r24, Z
 208:	90 91 2f 02 	lds	r25, 0x022F
 20c:	89 23       	and	r24, r25
 20e:	21 f0       	breq	.+8      	; 0x218 <__vector_9+0x90>
						PORTL |= (1 << GDO0);
 210:	80 91 0b 01 	lds	r24, 0x010B
 214:	81 60       	ori	r24, 0x01	; 1
 216:	03 c0       	rjmp	.+6      	; 0x21e <__vector_9+0x96>
					} else {
						PORTL &= ~(1 << GDO0);
 218:	80 91 0b 01 	lds	r24, 0x010B
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	80 93 0b 01 	sts	0x010B, r24
 222:	21 c0       	rjmp	.+66     	; 0x266 <__vector_9+0xde>
					}
					break;
				case 2:
					PORTL &= ~(1 << GDO0);
 224:	80 91 0b 01 	lds	r24, 0x010B
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	80 93 0b 01 	sts	0x010B, r24
					tx_sample = 0;
 22e:	10 92 2a 02 	sts	0x022A, r1
					
					tx_bit >>= 1;
 232:	80 91 2f 02 	lds	r24, 0x022F
 236:	86 95       	lsr	r24
 238:	80 93 2f 02 	sts	0x022F, r24
					
					if (!tx_bit) {
 23c:	88 23       	and	r24, r24
 23e:	99 f4       	brne	.+38     	; 0x266 <__vector_9+0xde>
						tx_bit = 0x80;
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	80 93 2f 02 	sts	0x022F, r24
						tx_byte++;
 246:	80 91 2b 02 	lds	r24, 0x022B
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 2b 02 	sts	0x022B, r24
						
						if (tx_byte >= tx_len) {
 250:	90 91 2e 02 	lds	r25, 0x022E
 254:	89 17       	cp	r24, r25
 256:	38 f0       	brcs	.+14     	; 0x266 <__vector_9+0xde>
							tx_active = 0;
 258:	10 92 2d 02 	sts	0x022D, r1
							tx_byte = 0;
 25c:	10 92 2b 02 	sts	0x022B, r1
							tx_header = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 2c 02 	sts	0x022C, r24
					break;
			}
							
		}
	}
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0b be       	out	0x3b, r0	; 59
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <send_command>:
inline void disable_spi(void) {
	SPCR &= ~(1 << SPE);
}

inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
 27c:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 27e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 280:	0d b4       	in	r0, 0x2d	; 45
 282:	07 fe       	sbrs	r0, 7
 284:	fd cf       	rjmp	.-6      	; 0x280 <send_command+0x4>
	return SPDR;
 286:	8e b5       	in	r24, 0x2e	; 46
inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
}

inline void deselect(void) {
	PORTB |= (1 << SPI_SS_PIN);
 288:	28 9a       	sbi	0x05, 0	; 5
// Send a strobe command
void send_command(uint8_t command) {
	select();
	send_spi(command);
	deselect();
}
 28a:	08 95       	ret

0000028c <send_command_sres>:
inline void disable_spi(void) {
	SPCR &= ~(1 << SPE);
}

inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
 28c:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 292:	0d b4       	in	r0, 0x2d	; 45
 294:	07 fe       	sbrs	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <send_command_sres+0x6>
	return SPDR;
 298:	8e b5       	in	r24, 0x2e	; 46
// Keeps CC1150 selected and waits for MISO to go low
// as per p21 of datasheet
void send_command_sres() {
	select();
	send_spi(CC1150_SRES);
	while(PINB & (1 << SPI_MISO_PIN));
 29a:	1b 99       	sbic	0x03, 3	; 3
 29c:	fe cf       	rjmp	.-4      	; 0x29a <send_command_sres+0xe>
inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
}

inline void deselect(void) {
	PORTB |= (1 << SPI_SS_PIN);
 29e:	28 9a       	sbi	0x05, 0	; 5
void send_command_sres() {
	select();
	send_spi(CC1150_SRES);
	while(PINB & (1 << SPI_MISO_PIN));
	deselect();
}
 2a0:	08 95       	ret

000002a2 <set_register>:
inline void disable_spi(void) {
	SPCR &= ~(1 << SPE);
}

inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
 2a2:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 2a4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2a6:	0d b4       	in	r0, 0x2d	; 45
 2a8:	07 fe       	sbrs	r0, 7
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <set_register+0x4>
	return SPDR;
 2ac:	8e b5       	in	r24, 0x2e	; 46
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 2ae:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <set_register+0xe>
	return SPDR;
 2b6:	8e b5       	in	r24, 0x2e	; 46
inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
}

inline void deselect(void) {
	PORTB |= (1 << SPI_SS_PIN);
 2b8:	28 9a       	sbi	0x05, 0	; 5
void set_register(uint8_t address, uint8_t data) {
	select();
	send_spi(address);
	send_spi(data);
	deselect();
}
 2ba:	08 95       	ret

000002bc <set_register_burst>:
inline void disable_spi(void) {
	SPCR &= ~(1 << SPE);
}

inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
 2bc:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 2be:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2c0:	0d b4       	in	r0, 0x2d	; 45
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <set_register_burst+0x4>
	return SPDR;
 2c6:	8e b5       	in	r24, 0x2e	; 46
 2c8:	fb 01       	movw	r30, r22
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <set_register_burst+0x22>
	
	select();
	send_spi(address);
	
	for (i = 0; i < length; i++) {
		send_spi(data[i]);
 2ce:	80 81       	ld	r24, Z
	PORTB |= (1 << SPI_SS_PIN);
}

// yes, SPI is this easy on AVR
inline uint8_t send_spi(uint8_t byte) {
	SPDR = byte;
 2d0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2d2:	0d b4       	in	r0, 0x2d	; 45
 2d4:	07 fe       	sbrs	r0, 7
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <set_register_burst+0x16>
	return SPDR;
 2d8:	8e b5       	in	r24, 0x2e	; 46
	uint8_t i;
	
	select();
	send_spi(address);
	
	for (i = 0; i < length; i++) {
 2da:	9f 5f       	subi	r25, 0xFF	; 255
 2dc:	31 96       	adiw	r30, 0x01	; 1
 2de:	94 17       	cp	r25, r20
 2e0:	b0 f3       	brcs	.-20     	; 0x2ce <set_register_burst+0x12>
inline void select(void) {
	PORTB &= ~(1 << SPI_SS_PIN);
}

inline void deselect(void) {
	PORTB |= (1 << SPI_SS_PIN);
 2e2:	28 9a       	sbi	0x05, 0	; 5
	for (i = 0; i < length; i++) {
		send_spi(data[i]);
	}
	
	deselect();
}
 2e4:	08 95       	ret

000002e6 <write_settings>:
void write_settings(REGSETTINGS *pRegSettings) {
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	8c 01       	movw	r16, r24
	set_register(CC1150_IOCFG1, 	pRegSettings->IOCFG1);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	f8 01       	movw	r30, r16
 2f0:	60 81       	ld	r22, Z
 2f2:	d7 df       	rcall	.-82     	; 0x2a2 <set_register>
	set_register(CC1150_IOCFG0, 	pRegSettings->IOCFG0);
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	f8 01       	movw	r30, r16
 2f8:	61 81       	ldd	r22, Z+1	; 0x01
 2fa:	d3 df       	rcall	.-90     	; 0x2a2 <set_register>
	set_register(CC1150_FIFOTHR, 	pRegSettings->FIFOTHR);
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	f8 01       	movw	r30, r16
 300:	62 81       	ldd	r22, Z+2	; 0x02
 302:	cf df       	rcall	.-98     	; 0x2a2 <set_register>
	set_register(CC1150_SYNC1, 		pRegSettings->SYNC1);
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	f8 01       	movw	r30, r16
 308:	63 81       	ldd	r22, Z+3	; 0x03
 30a:	cb df       	rcall	.-106    	; 0x2a2 <set_register>
	set_register(CC1150_SYNC0, 		pRegSettings->SYNC0);
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	f8 01       	movw	r30, r16
 310:	64 81       	ldd	r22, Z+4	; 0x04
 312:	c7 df       	rcall	.-114    	; 0x2a2 <set_register>
	set_register(CC1150_PKTLEN, 	pRegSettings->PKTLEN);
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	f8 01       	movw	r30, r16
 318:	65 81       	ldd	r22, Z+5	; 0x05
 31a:	c3 df       	rcall	.-122    	; 0x2a2 <set_register>
	set_register(CC1150_PKTCTRL0, 	pRegSettings->PKTCTRL0);
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	f8 01       	movw	r30, r16
 320:	66 81       	ldd	r22, Z+6	; 0x06
 322:	bf df       	rcall	.-130    	; 0x2a2 <set_register>
	set_register(CC1150_ADDR, 		pRegSettings->ADDR);
 324:	89 e0       	ldi	r24, 0x09	; 9
 326:	f8 01       	movw	r30, r16
 328:	67 81       	ldd	r22, Z+7	; 0x07
 32a:	bb df       	rcall	.-138    	; 0x2a2 <set_register>
	set_register(CC1150_CHANNR,		pRegSettings->CHANNR);
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	f8 01       	movw	r30, r16
 330:	60 85       	ldd	r22, Z+8	; 0x08
 332:	b7 df       	rcall	.-146    	; 0x2a2 <set_register>
	set_register(CC1150_FREQ2, 		pRegSettings->FREQ2);
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	f8 01       	movw	r30, r16
 338:	61 85       	ldd	r22, Z+9	; 0x09
 33a:	b3 df       	rcall	.-154    	; 0x2a2 <set_register>
	set_register(CC1150_FREQ1, 		pRegSettings->FREQ1);
 33c:	8e e0       	ldi	r24, 0x0E	; 14
 33e:	f8 01       	movw	r30, r16
 340:	62 85       	ldd	r22, Z+10	; 0x0a
 342:	af df       	rcall	.-162    	; 0x2a2 <set_register>
	set_register(CC1150_FREQ0, 		pRegSettings->FREQ0);
 344:	8f e0       	ldi	r24, 0x0F	; 15
 346:	f8 01       	movw	r30, r16
 348:	63 85       	ldd	r22, Z+11	; 0x0b
 34a:	ab df       	rcall	.-170    	; 0x2a2 <set_register>
	set_register(CC1150_MDMCFG4, 	pRegSettings->MDMCFG4);
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	f8 01       	movw	r30, r16
 350:	64 85       	ldd	r22, Z+12	; 0x0c
 352:	a7 df       	rcall	.-178    	; 0x2a2 <set_register>
	set_register(CC1150_MDMCFG3, 	pRegSettings->MDMCFG3);
 354:	81 e1       	ldi	r24, 0x11	; 17
 356:	f8 01       	movw	r30, r16
 358:	65 85       	ldd	r22, Z+13	; 0x0d
 35a:	a3 df       	rcall	.-186    	; 0x2a2 <set_register>
	set_register(CC1150_MDMCFG2, 	pRegSettings->MDMCFG2);
 35c:	82 e1       	ldi	r24, 0x12	; 18
 35e:	f8 01       	movw	r30, r16
 360:	66 85       	ldd	r22, Z+14	; 0x0e
 362:	9f df       	rcall	.-194    	; 0x2a2 <set_register>
	set_register(CC1150_MDMCFG1, 	pRegSettings->MDMCFG1);
 364:	83 e1       	ldi	r24, 0x13	; 19
 366:	f8 01       	movw	r30, r16
 368:	67 85       	ldd	r22, Z+15	; 0x0f
 36a:	9b df       	rcall	.-202    	; 0x2a2 <set_register>
	set_register(CC1150_MDMCFG0, 	pRegSettings->MDMCFG0);
 36c:	84 e1       	ldi	r24, 0x14	; 20
 36e:	f8 01       	movw	r30, r16
 370:	60 89       	ldd	r22, Z+16	; 0x10
 372:	97 df       	rcall	.-210    	; 0x2a2 <set_register>
	set_register(CC1150_DEVIATN, 	pRegSettings->DEVIATN);
 374:	85 e1       	ldi	r24, 0x15	; 21
 376:	f8 01       	movw	r30, r16
 378:	61 89       	ldd	r22, Z+17	; 0x11
 37a:	93 df       	rcall	.-218    	; 0x2a2 <set_register>
	set_register(CC1150_MCSM1, 		pRegSettings->MCSM1);
 37c:	87 e1       	ldi	r24, 0x17	; 23
 37e:	f8 01       	movw	r30, r16
 380:	62 89       	ldd	r22, Z+18	; 0x12
 382:	8f df       	rcall	.-226    	; 0x2a2 <set_register>
	set_register(CC1150_MCSM0, 		pRegSettings->MCSM0);
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	f8 01       	movw	r30, r16
 388:	63 89       	ldd	r22, Z+19	; 0x13
 38a:	8b df       	rcall	.-234    	; 0x2a2 <set_register>
	set_register(CC1150_FREND0, 	pRegSettings->FREND0);
 38c:	82 e2       	ldi	r24, 0x22	; 34
 38e:	f8 01       	movw	r30, r16
 390:	64 89       	ldd	r22, Z+20	; 0x14
 392:	87 df       	rcall	.-242    	; 0x2a2 <set_register>
	set_register(CC1150_FSCAL3, 	pRegSettings->FSCAL3);
 394:	83 e2       	ldi	r24, 0x23	; 35
 396:	f8 01       	movw	r30, r16
 398:	65 89       	ldd	r22, Z+21	; 0x15
 39a:	83 df       	rcall	.-250    	; 0x2a2 <set_register>
	set_register(CC1150_FSCAL2, 	pRegSettings->FSCAL2); 
 39c:	84 e2       	ldi	r24, 0x24	; 36
 39e:	f8 01       	movw	r30, r16
 3a0:	66 89       	ldd	r22, Z+22	; 0x16
 3a2:	7f df       	rcall	.-258    	; 0x2a2 <set_register>
	set_register(CC1150_FSCAL1, 	pRegSettings->FSCAL1); 
 3a4:	85 e2       	ldi	r24, 0x25	; 37
 3a6:	f8 01       	movw	r30, r16
 3a8:	67 89       	ldd	r22, Z+23	; 0x17
 3aa:	7b df       	rcall	.-266    	; 0x2a2 <set_register>
	set_register(CC1150_FSCAL0, 	pRegSettings->FSCAL0); 
 3ac:	86 e2       	ldi	r24, 0x26	; 38
 3ae:	f8 01       	movw	r30, r16
 3b0:	60 8d       	ldd	r22, Z+24	; 0x18
 3b2:	77 df       	rcall	.-274    	; 0x2a2 <set_register>
	set_register(CC1150_FSTEST, 	pRegSettings->FSTEST); 
 3b4:	89 e2       	ldi	r24, 0x29	; 41
 3b6:	f8 01       	movw	r30, r16
 3b8:	61 8d       	ldd	r22, Z+25	; 0x19
 3ba:	73 df       	rcall	.-282    	; 0x2a2 <set_register>
	set_register(CC1150_PTEST, 		pRegSettings->PTEST); 
 3bc:	8a e2       	ldi	r24, 0x2A	; 42
 3be:	f8 01       	movw	r30, r16
 3c0:	62 8d       	ldd	r22, Z+26	; 0x1a
 3c2:	6f df       	rcall	.-290    	; 0x2a2 <set_register>
	set_register(CC1150_TEST2, 		pRegSettings->TEST2); 
 3c4:	8c e2       	ldi	r24, 0x2C	; 44
 3c6:	f8 01       	movw	r30, r16
 3c8:	63 8d       	ldd	r22, Z+27	; 0x1b
 3ca:	6b df       	rcall	.-298    	; 0x2a2 <set_register>
}
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <main>:

int main(void) {
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
	CPU_PRESCALE(CPU_16MHz);
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	80 93 61 00 	sts	0x0061, r24
 3e0:	10 92 61 00 	sts	0x0061, r1
	
	// Door contact runs very slowly
	// But CC1150 supports 4MHz
	setup_spi(SPI_MSTR_CLK4);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	9c de       	rcall	.-712    	; 0x120 <setup_spi>
	}
}

// SPI helper functions
inline void enable_spi(void) {
	SPCR |= (1 << SPE);
 3e8:	8c b5       	in	r24, 0x2c	; 44
 3ea:	80 64       	ori	r24, 0x40	; 64
 3ec:	8c bd       	out	0x2c, r24	; 44
	// Door contact runs very slowly
	// But CC1150 supports 4MHz
	setup_spi(SPI_MSTR_CLK4);
	enable_spi();
	
	DDRL |= (1 << PORTL1);
 3ee:	80 91 0a 01 	lds	r24, 0x010A
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 93 0a 01 	sts	0x010A, r24
	DDRL |= (1 << PORTL2);
 3f8:	80 91 0a 01 	lds	r24, 0x010A
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	80 93 0a 01 	sts	0x010A, r24

	// Reset and then set registers and PA table
	send_command_sres();
 402:	44 df       	rcall	.-376    	; 0x28c <send_command_sres>
	write_settings(&regSettings);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	6e df       	rcall	.-292    	; 0x2e6 <write_settings>
	// PATABLE is at 0x3E for read, and 0x7E for write.
	set_register_burst(CC1150_PATABLE + 0x40, paTable, sizeof(paTable));
 40a:	8e e7       	ldi	r24, 0x7E	; 126
 40c:	6c e1       	ldi	r22, 0x1C	; 28
 40e:	72 e0       	ldi	r23, 0x02	; 2
 410:	48 e0       	ldi	r20, 0x08	; 8
 412:	54 df       	rcall	.-344    	; 0x2bc <set_register_burst>
void start_tx() {
	tx_len = 6; // length of tx_buf to be sent
	tx_byte = 0;
	tx_bit = 0;
	tx_header = 1;
	tx_active = 1; // flag to indicate if transmit is active
 414:	11 e0       	ldi	r17, 0x01	; 1
	while(1) {
		send_command(CC1150_STX);
		
		enable_pcint();
		
		for (int i = 0; i < 50; i++) {
 416:	06 e0       	ldi	r16, 0x06	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 418:	c0 e9       	ldi	r28, 0x90	; 144
 41a:	d1 e0       	ldi	r29, 0x01	; 1
	// PATABLE is at 0x3E for read, and 0x7E for write.
	set_register_burst(CC1150_PATABLE + 0x40, paTable, sizeof(paTable));

	// Send door signal 50 times
	while(1) {
		send_command(CC1150_STX);
 41c:	85 e3       	ldi	r24, 0x35	; 53
 41e:	2e df       	rcall	.-420    	; 0x27c <send_command>
		
		enable_pcint();
 420:	91 de       	rcall	.-734    	; 0x144 <enable_pcint>
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
void start_tx() {
	tx_len = 6; // length of tx_buf to be sent
	tx_byte = 0;
	tx_bit = 0;
	tx_header = 1;
	tx_active = 1; // flag to indicate if transmit is active
 426:	10 93 2d 02 	sts	0x022D, r17
			
			// Allow interrupt handler to send data
			start_tx();
			
			// Churn until interrupt handler runs
			while(tx_active);
 42a:	80 91 2d 02 	lds	r24, 0x022D
 42e:	88 23       	and	r24, r24
 430:	e1 f7       	brne	.-8      	; 0x42a <main+0x58>
	while(1) {
		send_command(CC1150_STX);
		
		enable_pcint();
		
		for (int i = 0; i < 50; i++) {
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	22 33       	cpi	r18, 0x32	; 50
 438:	31 05       	cpc	r19, r1
 43a:	a9 f7       	brne	.-22     	; 0x426 <main+0x54>
 43c:	10 93 2c 02 	sts	0x022C, r17
 440:	10 92 2f 02 	sts	0x022F, r1
 444:	10 92 2b 02 	sts	0x022B, r1
 448:	00 93 2e 02 	sts	0x022E, r16
			// Churn until interrupt handler runs
			while(tx_active);

		}
	
		disable_pcint();
 44c:	8c de       	rcall	.-744    	; 0x166 <disable_pcint>
		
		send_command(CC1150_SIDLE);
 44e:	86 e3       	ldi	r24, 0x36	; 54
 450:	15 df       	rcall	.-470    	; 0x27c <send_command>
 452:	80 e5       	ldi	r24, 0x50	; 80
 454:	93 ec       	ldi	r25, 0xC3	; 195
 456:	fe 01       	movw	r30, r28
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x86>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45e:	d9 f7       	brne	.-10     	; 0x456 <main+0x84>
 460:	dd cf       	rjmp	.-70     	; 0x41c <main+0x4a>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
